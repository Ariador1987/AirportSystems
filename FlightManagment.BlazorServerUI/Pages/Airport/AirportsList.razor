@page "/airportslist"
@inject Services.AirportService _airportService;
@inject NavigationManager _navMan;
@inject IJSRuntime js;

<div class="d-flex justify-content-between">
    <h3>Airports List</h3>
    <button class="btn btn-primary" @onclick="GoToAddAirport">Add Airport</button>
</div>
@if (Airports == null)
{
    <div>The list is empty</div>
}
else
{
    <table class="table table--primary fadeIn">
        <thead>
            <tr>
                <th>Name</th>
                <th>Construction Date</th>
            </tr>
        </thead>
        <tbody class="table--primary__body">
            @foreach (var airport in Airports)
            {
                <tr>
                    <td>@airport.Name</td>
                    <td>@Convert.ToDateTime(airport.ConstructionDate).ToString("dd.MM.yyyy")</td>
                    <td>
                        <a class="btn btn-primary btn--small"
                        href="/airportupdate/@airport.Id">
                            <span class="oi oi-pencil"></span>
                            Edit Airport
                        </a>
                        <a class="btn btn-secondary btn--small"
                        @onclick="(() => DeleteAirport(airport.Id))">
                            <span class="oi oi-trash"></span>
                            Delete Airport
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Airport> Airports;

    protected override async Task OnInitializedAsync()
    {
        Airports = await _airportService.GetAirports();
    }

    private void GoToAddAirport()
    {
        _navMan.NavigateTo("airportadd");
    }

    private async Task DeleteAirport(int id) 
    {
        var airport = Airports.FirstOrDefault(x => x.Id == id);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {airport.Name}?");
        if (confirm)
        {
            await _airportService.DeleteAirportAsync(id);
            await OnInitializedAsync();
        }
    }
}

