@page "/airportupdate/{id:int}"
@inject Services.AirportService _airportService;
@inject Services.CountryService _countryService;
@inject NavigationManager _navMan;

@if (Airport is null) {
    <div>Please wait</div>
}
else {
    <EditForm Model="@Airport" OnValidSubmit="@UpdateAirportAsync" class="form form--gradient mt-5">
        <h4 class="form__header">Update Airport</h4>
        <div class="form__group">
            <label for="name" class="form__label">Airport Name</label>
            <InputText type="text" @bind-Value="Airport.Name" class="form__input" id="name" />
        </div>
        <div class="form__group">
            <label for="country" class="form__label">Country Name</label>
            @*<InputNumber @bind-Value="Airport.CountryId" class="form__input" id="country" />*@
            <InputSelect id="country" @bind-Value="@Airport.CountryId">
                <option disabled>-- Select --</option>
                    if (Countries == null) {
                        <div>Please Wait...</div>
                    } 
                    else 
                    {
                        @foreach (var country in Countries)
                        {
                            <option value="@country.Id">@country.Name</option>
                        }
                    }
            </InputSelect>
        </div>
        <div class="form__group">
            <label for="date" class="form__label">Construction Date</label>
            <InputDate @bind-Value="Airport.ConstructionDate" class="form__input" id="date" />
        </div>
        <div class="form__buttons">
            <button class="btn" @onclick="Close">Back To list</button>
            <button class="btn" type="submit">Submit</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public AirportUpdateDTO Airport { get; set; }
    public List<Country> Countries { get; set; }

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var obj = await _airportService.GetAirportByIdForUpdate(id);
        Countries = await _countryService.GetCountries();
        Airport = obj;
    }

    private async Task UpdateAirportAsync()
    {
        try
        {
            await _airportService.UpdateAirportAsync(Airport, id);
            Close();
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void Close()
    {
        _navMan.NavigateTo("airportslist");
    }
}
