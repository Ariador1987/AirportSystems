@page "/airportadd"
@using FlightManagment.Configurations
@inject Services.AirportService _airportService;
@inject Services.CountryService _countryService;
@inject NavigationManager _navMan;

<EditForm Model="@Airport" OnValidSubmit="@AddAirportAsync" class="form form--gradient mt-5">
            <h4 class="form__header">Add Airport</h4>
            <div class="form__group">
                <label for="name" class="form__label">Airport Name</label>
                <InputText type="text" @bind-Value="Airport.Name" class="form__input" id="name" />
            </div>
            <div class="form__group">
                <label for="country" class="form__label">Country</label>
               @* <InputNumber @bind-Value="Airport.CountryId" class="form__input" id="country" />*@
               <InputSelect id="country" @bind-Value="@Airport.CountryId">
                   <option disabled selected>-- Select --</option>
            @if (Countries is null)
            {
            <div>Please Wait</div>
            }
            else
            {
                @foreach (var country in Countries)
                {
                    <option value="@country.Id">@country.Name</option>
                }
            }
               </InputSelect>
            </div>
            <div class="form__group">
                <label for="date" class="form__label">Construction Date</label>
                <InputDate @bind-Value="Airport.ConstructionDate" class="form__input" id="date" />
            </div>
            <div class="form__buttons">
                <button class="btn" @onclick="Close">Back To list</button>
                <button class="btn" type="submit">Submit</button>
            </div>
        </EditForm>

@code {
    [Parameter]
    public AirportCreateDTO Airport { get; set; }
    public List<Country> Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Airport = new AirportCreateDTO();
        Countries = await _countryService.GetCountries();
    }

    private async Task AddAirportAsync()
    {
        try
        {
            // bugfix
            if (Airport.CountryId == 0)
            {
                Airport.CountryId = 1;
            }

            await _airportService.AddAirportAsync(Airport);
            Close();
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message);
        }
    }

    private void Close()
    {
        _navMan.NavigateTo("airportslist");
    }
}
